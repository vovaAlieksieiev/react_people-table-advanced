{"version":3,"sources":["utils/searchHelper.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","CENTURIES","PeopleFilters","useSearchParams","searchParams","setSearchParams","query","get","sex","centuries","getAll","className","classNames","to","search","type","placeholder","onChange","event","queryParam","target","map","century","age","includes","filter","centuryNum","length","Loader","PersonLink","person","selectedPerson","useLocation","name","born","died","slug","motherName","fatherName","mother","father","PeopleTable","people","sort","order","useParams","handleSorting","sortBy","getArrowClass","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","catch","finally","preparedPeople","useMemo","filteredPeople","find","mom","dad","toLowerCase","Math","ceil","a","b","localeCompare","getIsActive","isActive","Navbar","role","App","path","element","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a582d5f8.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst CENTURIES = [16, 17, 18, 19, 20];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries');\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const queryParam = getSearchWith(\n      searchParams, { query: event.target.value || null },\n    );\n\n    setSearchParams(queryParam);\n  };\n\n  const handleCenturies = (age: string) => {\n    return centuries.includes(age)\n      ? centuries.filter(centuryNum => centuryNum !== age)\n      : [...centuries, age];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">\n        Filters\n      </p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n\n        <Link\n          className={classNames({ 'is-active': !sex })}\n          to={{ search: getSearchWith(searchParams, { sex: null }) }}\n        >\n          All\n        </Link>\n\n        <Link\n          className={classNames({ 'is-active': sex === 'm' })}\n          to={{ search: getSearchWith(searchParams, { sex: 'm' }) }}\n        >\n          Male\n        </Link>\n\n        <Link\n          className={classNames({ 'is-active': sex === 'f' })}\n          to={{ search: getSearchWith(searchParams, { sex: 'f' }) }}\n        >\n          Female\n        </Link>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleInput}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <Link\n                to={{\n                  search: getSearchWith(searchParams, {\n                    centuries: handleCenturies(century.toString()),\n                  }),\n                }}\n                data-cy=\"century\"\n                key={century}\n                className={classNames(\n                  'button mr-1',\n                  { 'is-info': centuries.includes(century.toString()) },\n                )}\n              >\n                {century}\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <Link\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n              to={{\n                search: getSearchWith(searchParams, { centuries: null }),\n              }}\n            >\n              All\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{\n            search: getSearchWith(searchParams, {\n              sex: null,\n              query: null,\n              centuries: null,\n            }),\n          }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  selectedPerson: string,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person, selectedPerson }) => {\n  const { search } = useLocation();\n\n  const {\n    name,\n    sex,\n    born,\n    died,\n    slug,\n    motherName,\n    fatherName,\n    mother,\n    father,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames(\n        { 'has-background-warning': slug === selectedPerson },\n      )}\n    >\n      <td>\n        <Link\n          to={`/people/${slug}${search}`}\n          className={classNames({ 'has-text-danger': sex === 'f' })}\n        >\n          {name}\n        </Link>\n      </td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {!motherName && '-'}\n\n        {motherName && !mother && motherName}\n\n        {motherName && mother && (\n          <Link\n            className=\"has-text-danger\"\n            to={`/people/${mother.slug}${search}`}\n          >\n            {motherName}\n          </Link>\n        )}\n      </td>\n      <td>\n        {!fatherName && '-'}\n\n        {fatherName && !father && fatherName}\n\n        {fatherName && father && (\n          <Link to={`/people/${father.slug}${search}`}>\n            {fatherName}\n          </Link>\n        )}\n      </td>\n    </tr>\n  );\n};\n","import classNames from 'classnames';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const { slug } = useParams();\n  const selectedPerson = slug || '';\n\n  const handleSorting = (sortBy: string) => {\n    if (!sort || sort !== sortBy) {\n      return getSearchWith(searchParams, { sort: sortBy });\n    }\n\n    if (sortBy === sort && !order) {\n      return getSearchWith(searchParams, { sort: sortBy, order: 'desc' });\n    }\n\n    return getSearchWith(searchParams, { sort: null, order: null });\n  };\n\n  const getArrowClass = (sortBy: string) => classNames('fas', {\n    'fa-sort': !sort || sort !== sortBy,\n    'fa-sort-up': sort === sortBy && !order,\n    'fa-sort-down': sort === sortBy && order,\n  });\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <Link to={{ search: handleSorting('name') }}>\n                <span className=\"icon\">\n                  <i className={getArrowClass('name')} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <Link to={{ search: handleSorting('sex') }}>\n                <span className=\"icon\">\n                  <i className={getArrowClass('sex')} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <Link to={{ search: handleSorting('born') }}>\n                <span className=\"icon\">\n                  <i className={getArrowClass('born')} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <Link to={{ search: handleSorting('died') }}>\n                <span className=\"icon\">\n                  <i className={getArrowClass('died')} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonLink\n            person={person}\n            selectedPerson={selectedPerson}\n            key={person.name}\n          />\n        ))}\n      </tbody>\n\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect, useMemo, useState } from 'react';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsError(false);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedPeople = useMemo(() => {\n    let filteredPeople = people.map(person => {\n      const mother = people\n        .find(mom => person.motherName === mom.name) || null;\n\n      const father = people\n        .find(dad => person.fatherName === dad.name) || null;\n\n      return {\n        ...person,\n        mother,\n        father,\n      };\n    });\n\n    if (query) {\n      filteredPeople = filteredPeople.filter(person => (\n        person.name.toLowerCase().includes(query.toLowerCase())\n        || person.motherName?.toLowerCase().includes(query.toLowerCase())\n        || person.fatherName?.toLowerCase().includes(query.toLowerCase())\n      ));\n    }\n\n    if (centuries.length > 0) {\n      filteredPeople = filteredPeople.filter(person => centuries\n        .find(century => Math.ceil(person.born / 100) === +century));\n    }\n\n    if (sex) {\n      filteredPeople = filteredPeople.filter(person => person.sex === sex);\n    }\n\n    if (sort) {\n      filteredPeople = filteredPeople.sort((a, b) => {\n        if (sort === 'name' || sort === 'sex') {\n          return order\n            ? b[sort].localeCompare(a[sort])\n            : a[sort].localeCompare(b[sort]);\n        }\n\n        if (sort === 'born' || sort === 'died') {\n          return order\n            ? +b[sort] - +a[sort]\n            : +a[sort] - +b[sort];\n        }\n\n        return 0;\n      });\n    }\n\n    return filteredPeople;\n  }, [people, query, centuries, sex, sort, order]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && !isError && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {!isLoading && isError && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n\n              {!isLoading && !isError && people.length < 1 && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!isLoading && !isError && preparedPeople.length < 1 && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {!isLoading && !isError && people.length > 0\n              && preparedPeople.length > 0 && (\n                <PeopleTable\n                  people={preparedPeople}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getIsActive = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item', { 'has-background-grey-lighter': isActive })\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getIsActive}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={getIsActive}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n            <Route path=\"/people\" element={<PeoplePage />} />\n            <Route path=\"/people/:slug\" element={<PeoplePage />} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}